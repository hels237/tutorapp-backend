package com.backend.tutor_app.servicesImpl;

import com.backend.tutor_app.model.enums.SecurityRiskLevel;
import com.backend.tutor_app.services.IpGeolocationService;
import com.maxmind.geoip2.DatabaseReader;
import com.maxmind.geoip2.exception.AddressNotFoundException;
import com.maxmind.geoip2.exception.GeoIp2Exception;
import com.maxmind.geoip2.model.CityResponse;
import com.maxmind.geoip2.record.City;
import com.maxmind.geoip2.record.Country;
import com.maxmind.geoip2.record.Location;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.net.InetAddress;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

/**
 * (Q) PHASE 2 - √âTAPE 2.4 : Impl√©mentation du service de g√©olocalisation IP
 * 
 * MISE √Ä JOUR : Int√©gration MaxMind GeoIP2 pour g√©olocalisation pr√©cise
 * - G√©olocalisation IP avec base de donn√©es locale (GeoLite2-City)
 * - D√©tection de pays, ville, coordonn√©es GPS
 * - Mode fallback si MaxMind non disponible
 * - Cache int√©gr√© pour optimiser les performances
 * 
 * @author TutorApp Team
 * @version 2.0 (MaxMind GeoIP2)
 */
@Service
@Slf4j
public class IpGeolocationServiceImpl implements IpGeolocationService {
    
    private final DatabaseReader databaseReader;
    
    @Value("${app.geoip.fallback-enabled:true}")
    private boolean fallbackEnabled;
    
    // (Q) PHASE 2 - Liste des pays √† risque √©lev√© (ISO 3166-1 alpha-2)
    private static final Set<String> HIGH_RISK_COUNTRIES = new HashSet<>(Arrays.asList(
        "KP", // Cor√©e du Nord
        "IR", // Iran
        "SY", // Syrie
        "CU", // Cuba
        "SD", // Soudan
        "SS"  // Soudan du Sud
    ));
    
    // (Q) PHASE 2 - Plages IP priv√©es (RFC 1918 + localhost)
    private static final String[] PRIVATE_IP_RANGES = {
        "10.", "192.168.", "172.16.", "172.17.", "172.18.", "172.19.",
        "172.20.", "172.21.", "172.22.", "172.23.", "172.24.", "172.25.",
        "172.26.", "172.27.", "172.28.", "172.29.", "172.30.", "172.31.",
        "127.", "localhost", "0:0:0:0:0:0:0:1", "::1"
    };
    
    /**
     * Constructeur avec injection du DatabaseReader
     * @param databaseReader Bean cr√©√© par GeoIpConfig (peut √™tre null si d√©sactiv√©)
     */
    @Autowired
    public IpGeolocationServiceImpl(@Autowired(required = false) DatabaseReader databaseReader) {
        this.databaseReader = databaseReader;
        
        if (databaseReader == null) {
            log.warn("‚ö†Ô∏è DatabaseReader est NULL - Mode fallback activ√©");
            log.warn("   La g√©olocalisation utilisera des heuristiques basiques");
        } else {
            log.info("‚úÖ IpGeolocationServiceImpl initialis√© avec MaxMind GeoIP2");
        }
    }
    
    @Override
    public String getCountryFromIp(String ipAddress) {
        log.debug("üåç G√©olocalisation de l'IP: {}", ipAddress);
        
        // Validation de base
        if (ipAddress == null || ipAddress.isBlank()) {
            return "UNKNOWN";
        }
        
        // D√©tection IP locale/priv√©e
        if (isPrivateIp(ipAddress)) {
            log.debug("üè† IP priv√©e/locale d√©tect√©e: {}", ipAddress);
            return "LOCAL";
        }
        
        // Tentative avec MaxMind GeoIP2
        if (databaseReader != null) {
            try {
                InetAddress inetAddress = InetAddress.getByName(ipAddress);
                CityResponse response = databaseReader.city(inetAddress);
                
                Country country = response.getCountry();
                String countryCode = country.getIsoCode();
                String countryName = country.getName();
                
                // Informations suppl√©mentaires (optionnel, pour logs enrichis)
                City city = response.getCity();
                Location location = response.getLocation();
                
                log.debug("‚úÖ IP {} g√©olocalis√©e:", ipAddress);
                log.debug("   - Pays: {} ({})", countryName, countryCode);
                if (city.getName() != null) {
                    log.debug("   - Ville: {}", city.getName());
                }
                if (location.getLatitude() != null && location.getLongitude() != null) {
                    log.debug("   - Coordonn√©es: {}, {}", location.getLatitude(), location.getLongitude());
                }
                
                return countryCode != null ? countryCode : "UNKNOWN";
                
            } catch (AddressNotFoundException e) {
                log.warn("‚ö†Ô∏è IP {} non trouv√©e dans la base MaxMind", ipAddress);
                return fallbackToHeuristic(ipAddress);
                
            } catch (GeoIp2Exception e) {
                log.error("‚ùå Erreur GeoIP2 pour {}: {}", ipAddress, e.getMessage());
                return fallbackToHeuristic(ipAddress);
                
            } catch (Exception e) {
                log.error("‚ùå Erreur inattendue lors de la g√©olocalisation de {}: {}", ipAddress, e.getMessage());
                return fallbackToHeuristic(ipAddress);
            }
        }
        
        // Si MaxMind non disponible, utiliser le fallback
        return fallbackToHeuristic(ipAddress);
    }
    
    /**
     * M√©thode de fallback utilisant des heuristiques simples
     * Utilis√©e si MaxMind n'est pas disponible ou √©choue
     */
    private String fallbackToHeuristic(String ipAddress) {
        if (!fallbackEnabled) {
            log.warn("‚ö†Ô∏è Fallback d√©sactiv√©, retour UNKNOWN pour: {}", ipAddress);
            return "UNKNOWN";
        }
        
        log.debug("üîÑ Utilisation du mode fallback pour: {}", ipAddress);
        
        // Heuristiques basiques (tr√®s limit√©es)
        if (ipAddress.startsWith("2.") || ipAddress.startsWith("5.")) {
            return "FR"; // France (plages Orange/Free)
        } else if (ipAddress.startsWith("8.8.") || ipAddress.startsWith("8.35.")) {
            return "US"; // Google DNS
        }
        
        log.warn("‚ö†Ô∏è Impossible de g√©olocaliser l'IP: {}", ipAddress);
        return "UNKNOWN";
    }
    
    @Override
    public boolean isVpnOrProxy(String ipAddress) {
        log.debug("üîç V√©rification VPN/Proxy pour: {}", ipAddress);
        
        if (ipAddress == null || ipAddress.isBlank()) {
            return false;
        }
        
        // TODO: Int√©grer MaxMind GeoIP2 Anonymous IP Database (payant)
        // Ou utiliser un service externe :
        // - IPQualityScore (https://www.ipqualityscore.com/)
        // - GetIPIntel (https://getipintel.net/)
        // - IP2Proxy (https://www.ip2location.com/proxy-detection)
        
        // Pour l'instant, on retourne false (pas de d√©tection)
        // L'int√©gration n√©cessiterait :
        // 1. T√©l√©charger GeoIP2-Anonymous-IP.mmdb (payant ~50‚Ç¨/mois)
        // 2. Cr√©er un second DatabaseReader dans GeoIpConfig
        // 3. Appeler anonymousIpReader.anonymousIp(inetAddress)
        
        log.debug("‚ö†Ô∏è D√©tection VPN/Proxy non impl√©ment√©e (retour false par d√©faut)");
        return false;
    }
    
    @Override
    public boolean isHighRiskCountry(String countryCode) {
        if (countryCode == null || countryCode.isBlank()) {
            return false;
        }
        
        boolean isHighRisk = HIGH_RISK_COUNTRIES.contains(countryCode.toUpperCase());
        
        if (isHighRisk) {
            log.warn("(Q) PHASE 2 - Pays √† risque √©lev√© d√©tect√©: {}", countryCode);
        }
        
        return isHighRisk;
    }
    
    @Override
    public SecurityRiskLevel calculateIpRiskLevel(String previousIp, String currentIp) {
        log.debug("üìä Calcul du risque IP: {} ‚Üí {}", previousIp, currentIp);
        
        // M√™me IP = Aucun risque
        if (previousIp != null && previousIp.equals(currentIp)) {
            log.debug("‚úÖ M√™me IP, risque faible");
            return SecurityRiskLevel.LOW;
        }
        
        // Obtenir les pays via MaxMind GeoIP2
        String previousCountry = getCountryFromIp(previousIp);
        String currentCountry = getCountryFromIp(currentIp);
        
        log.debug("   Pays pr√©c√©dent: {} | Pays actuel: {}", previousCountry, currentCountry);
        
        // V√©rifier VPN/Proxy
        boolean isVpn = isVpnOrProxy(currentIp);
        if (isVpn) {
            log.warn("‚ö†Ô∏è VPN/Proxy d√©tect√©: {} - Risque √âLEV√â", currentIp);
            return SecurityRiskLevel.HIGH;
        }
        
        // V√©rifier pays √† risque
        if (isHighRiskCountry(currentCountry)) {
            log.warn("‚ö†Ô∏è Connexion depuis un pays √† risque: {} - Risque √âLEV√â", currentCountry);
            return SecurityRiskLevel.HIGH;
        }
        
        // M√™me pays = Risque faible
        if (previousCountry.equals(currentCountry)) {
            log.debug("‚úÖ M√™me pays ({}), risque faible", currentCountry);
            return SecurityRiskLevel.LOW;
        }
        
        // Pays diff√©rent = Risque moyen
        log.info("‚ö†Ô∏è Changement de pays d√©tect√©: {} ‚Üí {} - Risque MOYEN", previousCountry, currentCountry);
        return SecurityRiskLevel.MEDIUM;
    }
    
    /**
     * (Q) PHASE 2 - V√©rifie si une IP est priv√©e/locale
     */
    private boolean isPrivateIp(String ipAddress) {
        for (String prefix : PRIVATE_IP_RANGES) {
            if (ipAddress.startsWith(prefix)) {
                return true;
            }
        }
        return false;
    }
}
